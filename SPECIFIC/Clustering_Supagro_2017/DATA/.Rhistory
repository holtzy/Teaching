anova(model)
anova(model2)
model=lm(Elisa_blup_AR1 ~ pop + allele*year,data=don[!is.na(don$allele),])
head(result_lm_2012_2015_DSDL_inter)
result_lm_2012_2015_DSDL_inter=data.frame(matrix(0,0,6))
colnames(result_lm_2012_2015_DSDL_inter)=c("marker","pval-marker","pval-year","pval-pop","pval-inter","R2")
num=0
for(i in colnames(genotype)){
# build data frame
num=num+1
don=cbind(Y, genotype[,which(colnames(genotype)%in%i)])
colnames(don)[4]="allele"
don$allele=droplevels(don$allele)
# Run the linear model
if(nlevels(don$allele)==2){
model=lm(Elisa_blup_AR1 ~ pop + allele*year,data=don[!is.na(don$allele),])
model2=lm(Elisa_blup_AR1 ~ allele + year + pop,data=don[!is.na(don$allele),] )
model3=lm(Elisa_blup_AR1 ~ year + pop,data=don[!is.na(don$allele),])
anova(model,model2)
anova(model3,model2)
anova(model2)
res=anova(model)
res
summary(model)
sum(is.na(don$allele))
# Add result to the 'result' file
result_lm_2012_2015_DSDL_inter[num,1:6]=c(i, res$`Pr(>F)`[1:4],summary(model)$r.squared)
}
}
result_lm_2012_2015_DSDL_inter[,2:6]=apply(result_lm_2012_2015_DSDL_inter[,2:6] , 2 , as.numeric)
result_lm_2012_2015_DSDL_inter=na.omit(result_lm_2012_2015_DSDL_inter)
dim(result_lm_2012_2015_DSDL_inter)
result_lm_2012_2015_DSDL_inter=merge(map,result_lm_2012_2015_DSDL_inter, by.x=1 , by.y=1, all.y=T)
result_lm_2012_2015_DSDL_inter=result_lm_2012_2015_DSDL_inter[order(result_lm_2012_2015_DSDL_inter$chr, result_lm_2012_2015_DSDL_inter$dist) , ]
head(result_lm_2012_2015_DSDL_inter)
plot(-log10(result_lm_2012_2015_DSDL_inter$`pval-inter`) , pch=20 , col=as.numeric(result_lm_2012_2015_DSDL_inter$chr) , cex=1.3, xaxt="n", ylab="LOD - scores" )
plot(-log10(result_lm_2012_2015_DSDL_inter$`pval-inter`) , pch=20 , col=as.numeric(result_lm_2012_2015_DSDL_inter$chr) , cex=1.3, xaxt="n", ylab="LOD - scores" )
abline(h=3.6, col="grey", lwd=1.5)
num=seq(1,nrow(result_lm_2012_2015_DSDL_inter))
num=aggregate(num, by=list(result_lm_2012_2015_DSDL_inter$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
plot(-log10(result_lm_2012_2015_DSDL_inter$`pval-inter`) , pch=20 , col=as.numeric(result_lm_2012_2015_DSDL_inter$chr) , cex=1.3, xaxt="n", ylab="LOD - scores" )
abline(h=-log10(0.05), col="grey", lwd=1.5)
num=seq(1,nrow(result_lm_2012_2015_DSDL_inter))
num=aggregate(num, by=list(result_lm_2012_2015_DSDL_inter$chr), mean , na.rm=T)
axis(1, at=num[,2], labels=num[,1])
# To use cache in the document
knitr::opts_chunk$set(cache=TRUE)
library(QTLRel)
library(xtable)
genotype<-read.table("/Users/holtz/Dropbox/Publi_Mosaique/DATA/DATA/GROUPED/genotypage.csv", sep = ";" , header = F, na.strings = "-")
genotype=as.matrix(genotype)
colnames(genotype)=genotype[1,]
genotype=as.data.frame(genotype[-1 , ])
names(genotype)[1]<-"geno"
print("--- Your genotyping matrix looks correct. Dimension of the matrix are :")
print(dim(genotype))
# I copy this matrix 2 times, since I read 2012 and 2015 together.
rownames(genotype)=genotype[,1]
genotype=genotype[,-1]
a=genotype ; rownames(a)=paste(rownames(a),"2012",sep="_")
b=genotype ; rownames(b)=paste(rownames(b),"2015",sep="_")
genotype=rbind(a,b)
map <- read.table("/Users/holtz/Dropbox/Publi_Mosaique/DATA/DATA/genetic_map.txt" , header=T , dec = ".", na.strings = "-" , check.names=F)
colnames(map) <- c("LG", "marqueur", "Distance","group_physique","Posi_physique")
rownames(map) <- map$marqueur
map$LG <- as.factor(map$LG)
print("--- Your genetic map looks correct. Dimension of the map are :")
print(dim(map))
map=map[	, c(2,1,3,5)]
colnames(map)=c("snp","chr", "dist", "phyPos")
BLUP<-read.table("/Users/holtz/Dropbox/Publi_Mosaique/DATA/DATA/GROUPED/phenotypage.csv", header = TRUE, sep=";")
colnames(BLUP)[1]="geno"
print("--- Your Phenotyping matrix looks correct. Dimension of the matrix are :")
print(dim(BLUP))
# Fichier de phénotypage modifié, il va falloir mettre la Elisa de 2012 et 2015 ensemble, avec une colonne année.
a=BLUP[, c(1,3)] ; a$year="2012" ; colnames(a)=c("geno", "Elisa_blup_AR1","year")
#a[,2]=a[,2]/sqrt( mean(c(0.66,0.83)) )
#a[,2]=ifelse(substr(a$geno, 1,2)=="TT", a[,2]/sqrt(0.66) , a[,2]/sqrt(0.83))
b=BLUP[, c(1,5)] ; b$year="2015" ; colnames(b)=c("geno", "Elisa_blup_AR1", "year")
#b[,2]=b[,2]/sqrt( mean(c(1.2,1.21)) )
#b[,2]=ifelse(substr(b$geno, 1,2)=="TT", b[,2]/sqrt(1.2) , a[,2]/sqrt(1.21))
BLUP=rbind(a,b)
rownames(BLUP)=paste( BLUP[,1], BLUP$year,sep="_")
BLUP=BLUP[,-1]
# Note: On peut garder les blups tels quels / ou les pondéré par la variance génet de chaque année moyennée sur les 2 pops / ou par la variance génet de chaque année et chaque pop.
Y=na.omit(BLUP)
Y=Y[which(rownames(Y)%in%rownames(genotype)) , ]
Y$pop=substr(rownames(Y),1,2)
genotype=genotype[which(rownames(genotype)%in%rownames(Y)) , ]
genotype=genotype[ match(rownames(Y),rownames(genotype)) , ]
Y=na.omit(BLUP)
Y=Y[which(rownames(Y)%in%rownames(genotype)) , ]
Y$pop=substr(rownames(Y),1,2)
genotype=genotype[which(rownames(genotype)%in%rownames(Y)) , ]
genotype=genotype[ match(rownames(Y),rownames(genotype)) , ]
set.seed(123)
XNNA=genotype
my_fun=function(x){length(x[x=="A" & !is.na(x) ])/length(!is.na(x)) }
prop=apply(XNNA , 2 , my_fun)
prop=apply(XNNA , 2 , my_fun)
for(i in c(1:ncol(XNNA))){
aa=XNNA[,i][is.na(XNNA[,i])]
bb=rbinom(length(aa),1,prob=prop[i])
XNNA[,i][is.na(XNNA[,i])]=c("B","A")[bb+1]
}
XNNA=as.matrix(XNNA)
XNNA[which(XNNA=="A")]<-"AA"
XNNA[which(XNNA=="B")]<-"BB"
K<-genMatrix(XNNA)
head(Y)
1+1
# Kinship matrix
K<-genMatrix(XNNA)
Y_tmp=Y[which(Y$pop="TT" & Y$year="2012") , ]
setwd("~/Documents/ENSEIGNEMENT/TP-CLUSTERING-SUPAGRO/DATA/READY_DATA")
data_raw=read.table("Expression.txt", header=T, row.names=1 )
data_raw=read.table("Expression.txt", header=T )
head(data_raw)
setwd("~/Documents/ENSEIGNEMENT/TP-CLUSTERING-SUPAGRO/DATA/READY_DATA")
data_raw=read.table("Expression.txt", header=T, row.names=1 )
data_rlog=read.table("Expression_Rlognorm.txt", header=T, row.names=1, sep=";")
dim(ls())
dim(data_raw)
data_raw[1:10 , 1:10]
data_rlog[1:10 , 1:10]
data_rlog[1:10 , 1:10]
data_raw=read.table("Expression.txt", header=T, row.names=1 )
data_rlog=read.table("Expression_Rlognorm.txt", header=T, row.names=1, sep=";")
data_rlog=read.table("Expression_Rlognorm.txt", header=T, row.names=1)
data_raw[1:10 , 1:10]
data_rlog[1:10 , 1:10]
dim(data_raw)
dim(data_rlog)
data_raw[1:10 , 1:10]
data_rlog[1:10 , 1:10]
sum_expe=read.table("Carac_Individus.txt" , header=T, sep="\t")
sum_expe
plot(data_raw[,1], data_raw[,2])
a
plot(data_raw[,1], data_raw[,2])
hist(data_raw[,1] , col="forestgreen")
hist(data_raw[,1] , col="forestgreen" , breaks=1000)
hist(data_raw[,1] , col="forestgreen" , breaks=1000 , xlab="expression")
hist(data_raw[,1] , col="forestgreen" , breaks=1000 , xlab="expression" , main="")
hist(data_raw[,1] , col="forestgreen" , breaks=1000 , xlab="expression" , main="", xlab=c(0,1000))
hist(data_raw[,1] , col="forestgreen" , breaks=1000 , xlab="expression" , main="", xlim=c(0,1000))
plot(log(data_raw[,1]), log(data_raw[,2]))
plot(data_rlog[,1], data_rlog[,2])
setwd("~/Documents/ENSEIGNEMENT/TP-CLUSTERING-SUPAGRO/DATA/READY_DATA")
data_raw=read.table("Expression.txt", header=T, row.names=1 )
data_rlog=read.table("Expression_Rlognorm.txt", header=T, row.names=1)
# 10 premières lignes et colonnes:
data_raw[1:10 , 1:10]
data_rlog[1:10 , 1:10]
# dimensions:
dim(data_raw)
dim(data_rlog)
my_dist=dist(t(data_rlog))
my_cor=cor(data_rlog)
par(mfrow=c(1,2))
hist(my_dist)
hist(my_cor)
library( "gplots" )
library("RColorBrewer")
heatmap.2( as.matrix(my_dist), scale="none", trace="none", dendrogram="both", col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255))
heatmap.2( as.matrix(my_cor), scale="none", trace="none", dendrogram="both", col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255))
dist=1-my_cor
fit <- cmdscale(as.dist(dist) , eig=TRUE, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
par(mar=c(4,4,2,2))
par(mfrow=c(1,1))
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="", pch=20 , cex=3  , col="grey")
dist=1-my_cor
fit <- cmdscale(as.dist(dist) , eig=TRUE, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
head(fit$points)
head(sum_expe)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="", pch=20 , cex=3  , col=colors()[as.numeric(as.factor(sum_expe$specie))])
as.numeric(as.factor(sum_expe$specie))
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="", pch=20 , cex=3  , col=as.numeric(as.factor(sum_expe$specie)))
setwd("~/Documents/ENSEIGNEMENT/TP-CLUSTERING-SUPAGRO/DATA/READY_DATA")
data_raw=read.table("Expression.txt", header=T, row.names=1 )
data_rlog=read.table("Expression_Rlognorm.txt", header=T, row.names=1)
setwd("~/Documents/ENSEIGNEMENT/TP-CLUSTERING-SUPAGRO/DATA/READY_DATA")
data_raw=read.table("Expression.txt", header=T, row.names=1 )
data_rlog=read.table("Expression_Rlognorm.txt", header=T, row.names=1)
setwd("~/Documents/ENSEIGNEMENT/TP-CLUSTERING-SUPAGRO/DATA/READY_DATA")
data_raw=read.table("Expression.txt", header=T, row.names=1 )
data_rlog=read.table("Expression_Rlognorm.txt", header=T, row.names=1)
sum_expe=read.table("Carac_Individus.txt" , header=T, sep="\t")
setwd("~/Documents/ENSEIGNEMENT/TP-CLUSTERING-SUPAGRO/DATA/READY_DATA")
data_raw=read.table("Expression.txt", header=T, row.names=1 )
data_rlog=read.table("Expression_Rlognorm.txt", header=T, row.names=1)
setwd("~/Documents/ENSEIGNEMENT/TP-CLUSTERING-SUPAGRO/DATA/READY_DATA")
sum_expe=read.table("Carac_Individus.txt" , header=T, sep="\t")
head(sum_expe)
head(data_raw)
my_dist=dist(t(data_rlog))
my_cor=cor(data_rlog)
par(mfrow=c(1,2))
hist(my_dist)
hist(my_cor)
library( "gplots" )
library("RColorBrewer")
heatmap.2( as.matrix(my_dist), scale="none", trace="none", dendrogram="both", col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255))
heatmap.2( as.matrix(my_cor), scale="none", trace="none", dendrogram="both", col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255))
dist=1-my_cor
# Réaliser le MDS
fit <- cmdscale(as.dist(dist) , eig=TRUE, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
# Réaliser le plot
par(mfrow=c(1,1))
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="", pch=20 , cex=3  , col=as.numeric(as.factor(sum_expe$specie)))
library(igraph)
dist=my_cor
dist[dist<0.98]=0
diag(dist)=0
g1<-graph.adjacency(dist,weighted="TRUE",mode="undirected")
lay<-layout.fruchterman.reingold(grap=g1,niter=6000)
a=rownames(dist)
a
color_igraph=as.numeric(as.factor(sum_expe$specie))
par(mar=c(0.5,0.5,0.5,0.5))
plot.igraph(g1,
layout=lay,
vertex.shape="circle",
vertex.label="" ,
vertex.color="blue" ,
vertex.size=8 ,
main="")
dist=my_cor
dist()
dist
dist=my_cor
dist[dist<0.7]=0
diag(dist)=0
g1<-graph.adjacency(dist,weighted="TRUE",mode="undirected")
lay<-layout.fruchterman.reingold(grap=g1,niter=6000)
color_igraph=as.numeric(as.factor(sum_expe$specie))
par(mar=c(0.5,0.5,0.5,0.5))
plot.igraph(g1,
layout=lay,
vertex.shape="circle",
vertex.label="" ,
vertex.color="blue" ,
vertex.size=8 ,
main="")
color_igraph
par(mar=c(0.5,0.5,0.5,0.5))
plot.igraph(g1,
layout=lay,
vertex.shape="circle",
vertex.label="" ,
vertex.color=color_igraph ,
vertex.size=8 ,
main="")
fit <- cmdscale(as.dist(my_dist) , eig=TRUE, k=2)
fit
names(fit)
fit <- cmdscale(as.dist(my_dist) , eig=TRUE, k=2)
head(fit$points)
par(mfrow=c(1,1))
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="", pch=20 , cex=3  , col="grey")
library(ggplot2)
fit <- cmdscale(as.dist(my_dist) , eig=TRUE, k=2)
fit=fit$points
head(fit)
plot(fit[,1], fit[,2], xlab="Coordinate 1", ylab="Coordinate 2", main="", pch=20 , cex=3  , col="grey")
plot(fit[,1], fit[,2], xlab="Coordinate 1", ylab="Coordinate 2", main="", pch=20 , cex=3  , col="grey")
head(sum_expe)
don=merge(fit, sum_expe, by.x=rownames(fit) , by.y=2)
rownames(fit)
don=cbind(fit, sum_expe)
head(don)
fit <- cmdscale(as.dist(my_dist) , eig=TRUE, k=2)
fit=fit$points
colnames(fit)=c("x","y")
head(fit)
plot(fit[,1], fit[,2], xlab="Coordinate 1", ylab="Coordinate 2", main="", pch=20 , cex=3  , col="grey")
don=cbind(fit, sum_expe)
head(don)
ggplot(don, aes(x=x , y=y) )
ggplot(don, aes(x=x , y=y) , geom_points() )
ggplot(don, aes(x=x , y=y) + geom_points() )
ggplot(don, aes(x=x , y=y) + geom_points()
ggplot(don, aes(x=x , y=y)) + geom_points()
ggplot(don, aes(x=x , y=y)) + geom_points()
ggplot(don, aes(x=x , y=y)) + geom_point()
head(don)
ggplot(don, aes(x=x , y=y, color=specie)) + geom_point()
ggplot(fit, aes(x=x , y=y)) + geom_point()
fit <- cmdscale(as.dist(my_dist) , eig=TRUE, k=2)
fit=fit$points
colnames(fit)=c("x","y")
head(fit)
ggplot(fit, aes(x=x , y=y)) + geom_point()
fit <- cmdscale(as.dist(my_dist) , eig=TRUE, k=2)
fit=as.data.frame(fit$points)
colnames(fit)=c("x","y")
head(fit)
ggplot(fit, aes(x=x , y=y)) + geom_point()
don=cbind(fit, sum_expe)
ggplot(don, aes(x=x , y=y, color=specie)) + geom_point()
heatmap(data_raw)
head(data_raw)
summary(data_raw)
heatmap(matrix(data_raw))
heatmap(as.matrix(data_raw))
heatmap( as.matrix(data_raw) , Colv = NA, Rowv = NA )
heatmap( as.matrix(data_raw) , Colv = NA, Rowv = NA, labRow=NA, labCol=NA )
heatmap( as.matrix(data_raw) , Colv = NA, Rowv = NA, labRow="genes", labCol=NA )
heatmap( as.matrix(data_raw) , Colv = NA, Rowv = NA, labRow="genes", labCol="indiv" )
heatmap( head(as.matrix(data_raw)) , Colv = NA, Rowv = NA, labRow="genes", labCol="indiv" )
heatmap( as.matrix(data_rlog) , Colv = NA, Rowv = NA, labRow="genes", labCol="indiv" )
heatmap( head(as.matrix(data_rlog)) , Colv = NA, Rowv = NA, labRow="genes", labCol="indiv" )
library(FactoMineR)
res.PCA = PCA(data_rlog, scale.unit=TRUE, ncp=4, graph=F )
res.PCA
res.PCA$eig
res.PCA$eig[,2]
barplot(res.PCA$eig[,2])
barplot(res.PCA$eig[1:10,2])
par(mfrow=c(1,2))
plot.PCA(res.PCA, axes=c(1, 2), choix="ind")
plot.PCA(res.PCA, axes=c(1, 2), choix="var")
res.PCA = PCA(t(data_rlog), scale.unit=TRUE, ncp=4, graph=F )
barplot(res.PCA$eig[1:10,2] )
plot.PCA(res.PCA, axes=c(1, 2), choix="ind")
plot.PCA(res.PCA, axes=c(1, 2), choix="var")
plot.PCA(res.PCA, axes=c(1, 2), choix="ind")
dimdesc(res.PCA, axes=c(1,2))
res.PCA = PCA(t(data_rlog), scale.unit=TRUE, graph=F )
barplot(res.PCA$eig[1:10,2] )
par(mfrow=c(1,2))
plot.PCA(res.PCA, axes=c(1, 2), choix="ind")
plot.PCA(res.PCA, axes=c(1, 2), choix="var")
plot.PCA(res.PCA, axes=c(1, 2), choix="var", labels="")
plot.PCA
plot.PCA(res.PCA, axes=c(1, 2), choix="var", label="none")
head(sum_expe)
as.numeric(sum_expe$specie)
library(RColorBrewer)
coul <- brewer.pal(3, "Set1")
coul[as.numeric(sum_expe$specie)]
my_color=coul[as.numeric(sum_expe$specie)]
plot.PCA(res.PCA, axes=c(1, 2), choix="ind", col=my_color)
my_color
help(plot.PCA)
plot.PCA(res.PCA, axes=c(1, 2), choix="ind", col.ind=my_color)
head(sum_expe)
library(RColorBrewer)
coul <- brewer.pal(3, "Set1")
my_color=coul[as.numeric(sum_expe$treatment)]
plot.PCA(res.PCA, axes=c(1, 2), choix="ind", col.ind=my_color)
my_color=coul[as.numeric(as.factor(paste(sum_expe$specie, sum_expe$treatment,sep="_")))]
plot.PCA(res.PCA, axes=c(1, 2), choix="ind", col.ind=my_color)
library(RColorBrewer)
coul <- brewer.pal(6, "Set1")
my_color=coul[as.numeric(as.factor(paste(sum_expe$specie, sum_expe$treatment,sep="_")))]
my_color
as.numeric(as.factor(paste(sum_expe$specie, sum_expe$treatment,sep="_")))
par(mfrow=c(1,1))
library(RColorBrewer)
coul <- brewer.pal(6, "Set1")
my_color=coul[as.numeric(as.factor(paste(sum_expe$specie, sum_expe$treatment,sep="_")))]
plot.PCA(res.PCA, axes=c(1, 2), choix="ind", col.ind=my_color)
library(ggplot2)
ggplot(fit, aes(x=x , y=y)) + geom_point()
don=cbind(fit, sum_expe)
ggplot(don, aes(x=x , y=y, color=specie)) + geom_point()
head(don)
ggplot(don, aes(x=x , y=y, color=specie, shape=treatment)) + geom_point()
ggplot(don, aes(x=x , y=y, color=specie)) + geom_point() + facet_wrap(~treatment)
hc=hclust(my_dist)
plot(hc)
help(hclust)
hc=rect.hclust(my_dist)
hc=rect.hclust(my_dist, k=2)
hc=rect.hclust(my_dist, 2)
rect.hclust
help(rect.hclust)
hc=rect.hclust(hc, k=2)
plot(hc)
rect.hclust(hc, k=2)
hc=hclust(my_dist)
help(hclust)
plot(hc)
rect.hclust(hc, k=2)
hc=hclust(my_dist, method="average")
plot(hc)
hc=hclust(my_dist, method="complete")
plot(hc)
rect.hclust(hc, k=2)
rect.hclust(hc, k=2, col=my_colors)
head(my_cor)
my_seuil=0.7
dist=my_cor
dist[dist<my_seuil]=0
diag(dist)=0
coul <- brewer.pal(3, "Set1")
my_color=coul[as.numeric(sum_expe$specie)]
par(mar=c(0.5,0.5,0.5,0.5))
plot.igraph(g1,
layout=lay,
vertex.shape="circle",
vertex.label="" ,
vertex.color=my_color ,
vertex.size=8 ,
main="")
legend("topleft", legend = c("expression Dic2 > Silur" , "expression Silur > Dic2"),
col = "black",
pch = c(15,20), bty = "n",  pt.cex = c(2,3), cex = 1.2 ,
text.col = "grey", horiz = FALSE, inset = c(0.1, 0.1))
legend("topleft", legend = levels(sum_expe$specie), col = my_colors,
pch = c(15,20), bty = "n",  pt.cex = c(2,3), cex = 1.2 ,
text.col = "grey", horiz = FALSE, inset = c(0.1, 0.1))
legend("topleft", legend = levels(sum_expe$specie), col = my_color,
pch = c(15,20), bty = "n",  pt.cex = c(2,3), cex = 1.2 ,
text.col = "grey", horiz = FALSE, inset = c(0.1, 0.1))
legend("topleft", legend = levels(sum_expe$specie), col = my_color,
pch = c(15,20), bty = "n",  pt.cex = 2, cex = 1.2 ,
text.col = "grey", inset = c(0.1, 0.1))
legend("topleft", legend = levels(sum_expe$specie), col = my_color,
pch = c(15,20), bty = "n",  pt.cex = 2, cex = 1.2 ,
text.col = "grey")
legend("topleft", legend = levels(sum_expe$specie), col = my_color,
pch = c(15,20), bty = "n",  pt.cex = 2)
legend("topleft", legend = levels(sum_expe$specie), col = my_color,
pch = 20, bty = "n",  pt.cex = 2)
# On calcule la position de chaque point:
g1<-graph.adjacency(dist, weighted="TRUE", mode="undirected")
lay<-layout.fruchterman.reingold(grap=g1, niter=6000)
# Je créé une palette de couleur:
coul <- brewer.pal(3, "Set1")
my_color=coul[as.numeric(sum_expe$specie)]
# Réalisation du graphique:
par(mar=c(0.5,0.5,0.5,0.5))
plot.igraph(g1,
layout=lay,
vertex.shape="circle",
vertex.label="" ,
vertex.color=my_color ,
vertex.size=8 ,
main="")
#Finally I add a legend
legend("topleft", legend = levels(sum_expe$specie), col = my_color,
pch = 20, bty = "n",  pt.cex = 2)
legend("topleft", legend = levels(sum_expe$specie), col = my_color, bty = "n",  pt.cex = 2)
# On calcule la position de chaque point:
g1<-graph.adjacency(dist, weighted="TRUE", mode="undirected")
lay<-layout.fruchterman.reingold(grap=g1, niter=6000)
# Je créé une palette de couleur:
coul <- brewer.pal(3, "Set1")
my_color=coul[as.numeric(sum_expe$specie)]
# Réalisation du graphique:
par(mar=c(0.5,0.5,0.5,0.5))
plot.igraph(g1,
layout=lay,
vertex.shape="circle",
vertex.label="" ,
vertex.color=my_color ,
vertex.size=8 ,
main="")
#Finally I add a legend
legend("topleft", legend = levels(sum_expe$specie), col = my_color, bty = "n",  pt.cex = 2)
legend("topleft", legend = levels(sum_expe$specie), col = my_color, bty = "n",  pt.cex = 2, pch=20)
#Fixer un seuil:
my_seuil=0.4
# Faire une nouvelle matrice de corrélation avec des 0 si < au seuil:
dist=my_cor
dist[dist<my_seuil]=0
diag(dist)=0
# On calcule la position de chaque point:
g1<-graph.adjacency(dist, weighted="TRUE", mode="undirected")
lay<-layout.fruchterman.reingold(grap=g1, niter=6000)
# Je créé une palette de couleur:
coul <- brewer.pal(3, "Set1")
my_color=coul[as.numeric(sum_expe$specie)]
# Réalisation du graphique:
par(mar=c(0.5,0.5,0.5,0.5))
plot.igraph(g1,
layout=lay,
vertex.shape="circle",
vertex.label="" ,
vertex.color=my_color ,
vertex.size=8 ,
main="")
#Finally I add a legend
legend("topleft", legend = levels(sum_expe$specie), col = my_color, bty = "n",  pt.cex = 2, pch=20)
heatmap( as.matrix(data_rlog) , Colv = NA, Rowv = NA, labRow="genes", labCol="indiv" )
heatmap( as.matrix(dist , labRow="genes", labCol="indiv" )
heatmap( my_dist , Colv = NA, Rowv = NA, labRow="genes", labCol="indiv" )
heatmap( my_dist)
my_dist
as.matrix(my_dist)
heatmap( as.matrix(my_dist) )
heatmap( as.matrix(my_dist) , Colv = NA, Rowv = NA, labRow="genes", labCol="indiv" )
heatmap( as.matrix(my_dist) , Colv = NA,  labRow="genes", labCol="indiv" )
heatmap( as.matrix(my_dist) , Rowv = NA, labRow="genes", labCol="indiv" )
heatmap( as.matrix(my_dist) , Rowv = NA, Colv = NA, labRow="genes", labCol="indiv" )
coul <- brewer.pal(3, "Set1")
my_color=coul[as.numeric(sum_expe$specie)]
heatmap( as.matrix(my_dist) ,  labRow="genes", labCol="indiv", RowSideColors=my_color  )
heatmap( as.matrix(my_dist) ,  labRow="genes", labCol="indiv", ColSideColors=my_color  )
heatmap( as.matrix(my_cor) ,  labRow="genes", labCol="indiv", ColSideColors=my_color  )
heatmap( as.matrix(my_cor) ,  labRow="genes", labCol="indiv", ColSideColors=my_color  )
diag(my_cor)=NA
heatmap( as.matrix(my_cor) ,  labRow="genes", labCol="indiv", ColSideColors=my_color  )
